// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "flutter_lodz.proto" (syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message StateManagementProposal
 */
export interface StateManagementProposal {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message StateManagement
 */
export interface StateManagement {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * From 0 to 10
     *
     * @generated from protobuf field: int32 rating = 3;
     */
    rating: number;
}
/**
 * @generated from protobuf message ListStateManagementsRequest
 */
export interface ListStateManagementsRequest {
}
/**
 * @generated from protobuf message ListStateManagementsResponse
 */
export interface ListStateManagementsResponse {
    /**
     * @generated from protobuf field: repeated StateManagement state_managements = 1;
     */
    stateManagements: StateManagement[];
}
// @generated message type with reflection information, may provide speed optimized methods
class StateManagementProposal$Type extends MessageType<StateManagementProposal> {
    constructor() {
        super("StateManagementProposal", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StateManagementProposal>): StateManagementProposal {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<StateManagementProposal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StateManagementProposal): StateManagementProposal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StateManagementProposal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StateManagementProposal
 */
export const StateManagementProposal = new StateManagementProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StateManagement$Type extends MessageType<StateManagement> {
    constructor() {
        super("StateManagement", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "rating", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StateManagement>): StateManagement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.rating = 0;
        if (value !== undefined)
            reflectionMergePartial<StateManagement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StateManagement): StateManagement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int32 rating */ 3:
                    message.rating = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StateManagement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int32 rating = 3; */
        if (message.rating !== 0)
            writer.tag(3, WireType.Varint).int32(message.rating);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message StateManagement
 */
export const StateManagement = new StateManagement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListStateManagementsRequest$Type extends MessageType<ListStateManagementsRequest> {
    constructor() {
        super("ListStateManagementsRequest", []);
    }
    create(value?: PartialMessage<ListStateManagementsRequest>): ListStateManagementsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListStateManagementsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListStateManagementsRequest): ListStateManagementsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListStateManagementsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListStateManagementsRequest
 */
export const ListStateManagementsRequest = new ListStateManagementsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListStateManagementsResponse$Type extends MessageType<ListStateManagementsResponse> {
    constructor() {
        super("ListStateManagementsResponse", [
            { no: 1, name: "state_managements", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => StateManagement }
        ]);
    }
    create(value?: PartialMessage<ListStateManagementsResponse>): ListStateManagementsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stateManagements = [];
        if (value !== undefined)
            reflectionMergePartial<ListStateManagementsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListStateManagementsResponse): ListStateManagementsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated StateManagement state_managements */ 1:
                    message.stateManagements.push(StateManagement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListStateManagementsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated StateManagement state_managements = 1; */
        for (let i = 0; i < message.stateManagements.length; i++)
            StateManagement.internalBinaryWrite(message.stateManagements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListStateManagementsResponse
 */
export const ListStateManagementsResponse = new ListStateManagementsResponse$Type();
/**
 * @generated ServiceType for protobuf service FlutterLodz
 */
export const FlutterLodz = new ServiceType("FlutterLodz", [
    { name: "ProposeStateManagement", options: {}, I: StateManagementProposal, O: StateManagement },
    { name: "ListStateManagements", options: {}, I: ListStateManagementsRequest, O: ListStateManagementsResponse }
]);
